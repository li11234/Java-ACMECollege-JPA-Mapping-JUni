<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>cst8277</groupId>
	<artifactId>ACMECollege-JPA-Mapping-JUnit-Skeleton</artifactId>
	<version>1</version>
	<packaging>jar</packaging>
	<name>ACMECollege-JPA-Mapping-JUnit-Skeleton</name>
	<description>Mapping of DB to entities and unit testing them for CRUD</description>

	<!-- why is everything a property? Because hard-coded values become part 
		of Maven's immutable Model object and then their contents can't be changed. 
		However, if the value is set in a user-defined property BEFORE the Model 
		object is created, then it is possible to do: mvn clean compile -Dfoo.bar.version=1.2.3 
		in order to (say for example) test out a newer version of some dependency 
		without having to change the pom.xml.
    -->
	<properties>
	    <!-- maven properties -->
	    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	    <maven.compiler.release>17</maven.compiler.release>
	    <maven.compiler.target>17</maven.compiler.target>
	    <maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
	    <failOnMissingWebXml>false</failOnMissingWebXml>
	    <maven-project-info-reports-plugin.version>3.1.2</maven-project-info-reports-plugin.version>
	    <maven-surefire-plugin.version>3.0.0-M5</maven-surefire-plugin.version>

	    <!-- code properties -->
            <log4j-api.version>2.17.1</log4j-api.version>
            <log4j-core.version>2.17.1</log4j-core.version>
            <hibernate.version>5.6.3.Final</hibernate.version>
            <jakarta.annotation-api.version>1.3.5</jakarta.annotation-api.version>
            <jakarta.persistence.version>2.2.3</jakarta.persistence.version>
	    <connectorj.version>8.0.31</connectorj.version>

	    <!-- test properties -->
	    <junit.version>5.7.0</junit.version>
	    <org.hamcrest.version>2.2</org.hamcrest.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>${log4j-api.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${log4j-core.version}</version>
		</dependency>

      <!-- Jakarta EE 8 API dependencies -->
      <dependency>
          <groupId>jakarta.annotation</groupId>
          <artifactId>jakarta.annotation-api</artifactId>
          <version>${jakarta.annotation-api.version}</version>
      </dependency>
      <dependency>
          <groupId>jakarta.persistence</groupId>
          <artifactId>jakarta.persistence-api</artifactId>
          <version>${jakarta.persistence.version}</version>
      </dependency>
    
      <!-- Hiberate dependency -->
      <dependency>
          <groupId>org.hibernate</groupId>
          <artifactId>hibernate-entitymanager</artifactId>
          <version>${hibernate.version}</version>
          <!-- Note: because we are using the offical Jakarta EE 8 dependencies above,must instruct
          hibernate-entitymanagerto skip its own reliance on javax.persistence:javax.persistence-api
          dependency as there are some minor version mismatches -->
          <exclusions>
              <exclusion>
                  <groupId>javax.persistence</groupId>
                  <artifactId>javax.persistence-api</artifactId>
              </exclusion>
          </exclusions>
      </dependency>
	  <dependency>
	      <groupId>mysql</groupId>
		  <artifactId>mysql-connector-java</artifactId>
		  <version>${connectorj.version}</version>
	  </dependency>

      <dependency>
         <groupId>org.junit.jupiter</groupId>
         <artifactId>junit-jupiter</artifactId>
         <version>${junit.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.hamcrest</groupId>
         <artifactId>hamcrest</artifactId>
         <version>${org.hamcrest.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.hamcrest</groupId>
         <artifactId>hamcrest-library</artifactId>
         <version>${org.hamcrest.version}</version>
         <scope>test</scope>
      </dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.plugin.version}</version>
				<configuration>
					<release>${maven.compiler.release}</release>
					<target>${maven.compiler.release}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
				<configuration>
					<testFailureIgnore>true</testFailureIgnore>
					<forkCount>1</forkCount>
					<argLine>-Xmx1024m</argLine>
					<includes>
						<include>**/Test*.java</include>
						<include>**/*Test.java</include>
					</includes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
			</plugin>
		</plugins>
	</build>

	<!-- Generate HTML Report -->
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>${maven-project-info-reports-plugin.version}</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>index</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
			</plugin>
		</plugins>
	</reporting>

</project>